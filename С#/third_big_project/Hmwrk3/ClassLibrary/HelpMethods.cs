namespace ClassLibrary
{
    /// <summary>
    /// Класс вспомогательных методов.
    /// </summary>
    public static class HelpMethods
    {
        /// <summary>
        /// Проверка, яляется ли символ гласным.
        /// </summary>
        public static bool IsVowel(char ch)
        {
            // Является ли 'y' в английском гласной - вопрос дискуссионный. У меня в работе нет.
            string chars = "euioaEUIOAаоуыэяёюиеАОУЫЭЯЁЮИЕ"; 
            // Проверяем вхождение символов в большую строчку гласных букв двух языков.
            if (chars.IndexOf(ch) >= 0 && char.IsLetter(ch)) // Также проверяем, буква ли это вообще.
            {
                return true;
            }
            return false;
        }   
        /// <summary>
        /// Проверка, яляется ли символ согласным.
        /// </summary>
        public static bool IsConsonant(char ch)
        {
            // Можно было сделать строку ВСЕХ согласных буква двух языков, как в IsVowel...Но это тупо,
            // поэтому использую отрицание к первому методу.
            if(!IsVowel(ch) && char.IsLetter(ch)) // Также проверяем, буква ли это вообще.
            {
                return true;
            }
            return false;
        }
        /// <summary>
        /// Проверка строки на соответствие формата. 
        /// </summary>
        /* Что такое "формат" в ТЗ не указано, поэтому
        в моем понимании формат - отсутствие посторонних символов, кроме точки, пробела и 
        русских и английских алфавитов. Также, благодаря отдельной обработке этих случаев в 
        Program, можно ставить в файл сколько угодно пробелов и точек подряд. */
        public static bool TestFormat(string str)
        {
            char[] goodChars = {' ', '.', 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 
                'p', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 
                'b', 'n', 'm', 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', 'A', 
                'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'Z', 'X', 'C', 'V', 'B', 'N', 
                'M', 'й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ', 'ф', 
                'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э', 'я', 'ч', 'с', 'м', 
                'и', 'т', 'ь', 'б', 'ю', 'ё', 'Й', 'Ц', 'У', 'К', 'Е', 'Н', 'Г', 'Ш', 
                'Щ', 'З', 'Х', 'Ъ', 'Ф', 'Ы', 'В', 'А', 'П', 'Р', 'О', 'Л', 'Д', 'Ж', 
                'Э', 'Я', 'Ч', 'С', 'М', 'И', 'Т', 'Ь', 'Б', 'Ю', 'Ё' };
            /* Проверка: если хоть один из символов в файле не входит в список допустимых возвразаем False.
            Можно было реализовать 100500 способами, например, просто через for, но так короче. */
            if(str.Any(x => !goodChars.Contains(x)))
            {
                return false;
            }
            return true;
        }

        

        /// <summary>
        /// Метод, проверяющий, является ли слово запрещенным в названии файла на Windows.
        /// </summary>
        public static bool IsBanWord(string str)
        {
            /*Так как пользователи mac и linux существуют - можно также добавить в начале 
            программы вопрос "Ваша платформа Windows?", но, как мне показалось, данная
            перегрузка интерфейса излишня, очень редко кому-то захочется так назвать файл,
            если цель этого пользователя не сломать программу.*/
            string[] banWords = {"CON","PRN","AUX","NUL","COM0","COM2",
                                        "COM3","COM4","COM5","COM6","COM7","COM8",
                                        "COM9","COMSCSI","LPT0","LPT1","LPT2","LPT3",
                                        "LPT4","LPT5","LPT7","LPT8","LPT9", "LPTNO",
                                        "LPTSCSI","LPTNO"};
            return banWords.Contains(str);
        }
    }
}
